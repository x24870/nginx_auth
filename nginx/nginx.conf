events {
    worker_connections 1024;
}

http {
    include                    mime.types;
    default_type               application/octet-stream;
    types_hash_max_size        4096;
    client_body_in_file_only   clean;
    client_body_buffer_size    32K;
    client_max_body_size       8M;
    proxy_pass_request_headers on;
    proxy_pass_header          Host;
    underscores_in_headers     on;
    send_timeout               300s;
    keepalive_timeout          65;
    disable_symlinks           off;
    sendfile                   on;
    gzip                       on;

    server {
        listen      80;
        listen      [::]:80;
        server_name _;

	location / {
		# authenticate by internal auth service		
		auth_request /auth;
		error_page 401 = @error401;

		# domain froninting setting
		resolver 8.8.8.8;
		#add_header 'Access-Control-Allow-Origin' '*';
        	add_header 'Access-Control-Allow-Credentials' 'true';
        	add_header 'Access-Control-Allow-Headers' 'token,Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,X-Forwarded-Host,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        	add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';
        	add_header 'Access-Control-Max-Age' 1728000;
        	add_header 'Content-Type' 'text/plain charset=UTF-8';
        	
		# pre flight request
		if ($request_method = 'OPTIONS') {
            		add_header 'Access-Control-Allow-Origin' '*';
            		add_header 'Access-Control-Allow-Headers' 'token,Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,X-Forwarded-Host,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
            		add_header 'Content-Length' 0;
            		return 204;
        	}
        
		proxy_redirect off;
        	proxy_set_header X-real-ip $remote_addr;
        	proxy_set_header X-forward-for $proxy_add_x_forwarded_for;
        	proxy_pass http://$http_X_Forwarded_Host;
        	server_tokens off;
	}

        location /live {
            root /srv/http/www;
            try_files $uri /index.html =404;
        }

        location /test {
            root /srv/http/www;
            try_files $uri /test.html =404;
        }

	# auth routing
	location /auth {
		internal;
		
		proxy_pass http://localhost:8080/auth;

	        # abandon payload, only keep header
		#proxy_pass_request_body off;
       		#proxy_set_header Content-Length "";

     		 # send the header for authentication (optional)
       		 #proxy_set_header X-Original-URI $request_uri;
       		 # proxy_set_header Host $host;
       		 # proxy_set_header X-Forwarded-Host $host;
	
	}

	# just for testing
	location /private {
		auth_request /auth;
		error_page 401 = @error401;

		proxy_pass http://localhost:8080/private;
	}

	location @error401 {
		return 401;
	}

    }

}

